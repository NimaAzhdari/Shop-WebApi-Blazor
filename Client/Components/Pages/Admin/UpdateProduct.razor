@page "/UpdateProduct/{Id:guid}"
@using Radzen
@using Radzen.Blazor
@inject HttpClient http
@inject NavigationManager NavigationManager
@using System.Text.Json
@using System.Text
@inject DialogService DialogService


<RadzenTemplateForm Data="@product" TItem="Product" Submit="@HandleSubmit">
    <RadzenFormField>
        <RadzenLabel Text="نام محصول" Component="Name" ></RadzenLabel>
        <RadzenTextBox @bind-Value="@product.Name" Name="Name" ></RadzenTextBox>
        <RadzenRequiredValidator Component="Name"></RadzenRequiredValidator>
    </RadzenFormField>

    <RadzenFormField>
        <RadzenLabel Text="توضیحات" Component="Description"></RadzenLabel>
        <RadzenTextBox @bind-Value="@product.Description" Name="Description" ></RadzenTextBox>
        <RadzenRequiredValidator Component="Description"></RadzenRequiredValidator>
    </RadzenFormField>

    <RadzenFormField>
        <RadzenLabel Text="قیمت" Component="Price"></RadzenLabel>
        <RadzenNumeric @bind-Value="@product.Price" Name="Price" ></RadzenNumeric>
        <RadzenRequiredValidator Component="Price"></RadzenRequiredValidator>
    </RadzenFormField>

     <RadzenFormField>
        <RadzenLabel Text="موجودی" Component="Stock"></RadzenLabel>
        <RadzenNumeric @bind-Value="@product.Stock" Name="Stock" ></RadzenNumeric>
        <RadzenRequiredValidator Component="Stock"></RadzenRequiredValidator>
    </RadzenFormField>

    <RadzenFormField>
        <RadzenText>عکس فعلی</RadzenText> 
        <RadzenImage Path="@($"{baseUrl}{product.ImageURL}")"></RadzenImage>   
    </RadzenFormField>

     <RadzenFormField>
        <RadzenLabel Text="عکس کالا" ></RadzenLabel>
        <InputFile OnChange="HandleFileUpload" />
    </RadzenFormField>

    <RadzenButton ButtonType="ButtonType.Submit" Text="ارسال" Icon="save"></RadzenButton>

</RadzenTemplateForm>

@code
{
    [Parameter]
    public Guid Id{get;set;}

    Product product=new();

    byte[]? uploadedFile;
    string uploadedFileName;
    private string baseUrl{get;set;}

    bool ImageChanged=false;
     protected override async Task OnInitializedAsync()
        {
           baseUrl = NavigationManager.BaseUri;
           product= await http.GetFromJsonAsync<Product>($"api/User/GetProductById/{Id}");
           
        }

    async Task HandleFileUpload(InputFileChangeEventArgs args)
    {
        ImageChanged=true;
        
        var file = args.File;
        uploadedFileName = file.Name;

        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        uploadedFile = memoryStream.ToArray();
    }
    async Task HandleSubmit()
    {
        if (ImageChanged == false)
        {
            var response=await http.PutAsJsonAsync<Product>("api/Admin/UpdateProduct",product);
                if(response.IsSuccessStatusCode)
                {
                    await DialogService.OpenAsync(
                "پیام",
                ds => @<div>
                    <h4> انجام شد</h4>
                </div>,
                 new DialogOptions { Width = "400px", Height = "200px" }
                );
                }
        }
        else
        {
            var JsonProductUpdate=JsonSerializer.Serialize(product);

             using var content = new MultipartFormDataContent();
             content.Add(new ByteArrayContent(uploadedFile),"File",uploadedFileName);
             content.Add(new StringContent(JsonProductUpdate, Encoding.UTF8, "application/json"),"ProductJson");

            var response=await http.PutAsync("api/Admin/UpdateProductWithImage",content);

            if(response.IsSuccessStatusCode)
                {
                    await DialogService.OpenAsync(
                "پیام",
                ds => @<div>
                    <h4> انجام شد</h4>
                </div>,
                 new DialogOptions { Width = "400px", Height = "200px" }
                );
                }
        }
    }
   
}