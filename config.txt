In .NET 8, the `--hosted` option for Blazor WebAssembly was removed. To create a hosted Blazor WebAssembly project, you’ll need to manually set up the project structure. Here’s how to do it:

### 1. **Create the Blazor WebAssembly Client and API Server Projects Separately**

   - Create the main solution folder:
     ```bash
     mkdir MyBlazorApp
     cd MyBlazorApp
     ```

   - Create the Blazor WebAssembly project:
     ```bash
     dotnet new blazorwasm -o Client
     ```

   - Create the ASP.NET Core Web API project for the server:
     ```bash
     dotnet new webapi -o Server
     ```

   - Create a shared project for shared models or services:
     ```bash
     dotnet new classlib -o Shared
     ```

### 2. **Add Projects to a Solution**
   - Create a new solution file to manage all projects:
     ```bash
     dotnet new sln
     ```

   - Add each project to the solution:
     ```bash
     dotnet sln add Client/Client.csproj
     dotnet sln add Server/Server.csproj
     dotnet sln add Shared/Shared.csproj
     ```

### 3. **Set Up Project References**
   - In the `Client` project, add a reference to the `Shared` project so they can share models or services:
     ```bash
     dotnet add Client/Client.csproj reference Shared/Shared.csproj
     ```

   - In the `Server` project, add references to both the `Client` and `Shared` projects:
     ```bash
     dotnet add Server/Server.csproj reference Client/Client.csproj
     dotnet add Server/Server.csproj reference Shared/Shared.csproj
     ```

### 4. **Configure the Server to Host the Client**
   - Open `Server/Server.csproj` and add a reference to the Blazor WebAssembly package:
     ```xml
     <ItemGroup>
       <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Server" Version="8.0.0" />
     </ItemGroup>
     ```

   - In `Server`'s `Startup.cs` (or equivalent configuration file), configure the server to serve the `Client` app:
     ```csharp
     app.UseBlazorFrameworkFiles();
     app.UseStaticFiles();
     ```

   - Set up endpoints to handle both API requests and the client app:
     ```csharp
     app.UseRouting();

     app.MapControllers();
     app.MapFallbackToFile("index.html");
     ```

### 5. **Run the Application**
   - Start the server project to launch both the server and Blazor WebAssembly client:
     ```bash
     dotnet run --project Server
     ```

### Access Your Hosted Blazor WebAssembly App
Once the server starts, go to `https://localhost:5001` (or the specified URL) to see your app. This setup mimics the functionality of a hosted Blazor WebAssembly app in .NET 8.



+


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
